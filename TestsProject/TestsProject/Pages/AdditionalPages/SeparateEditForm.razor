@page "/SeparateEditForm/{id}"
@inject IUriHelper UriHelper
@inject HttpClient Http
@inject WebServicePath wsp
@using TestsProject.Data

@if (category == null)
{
    <h1>Loading...</h1>
}
else
{
    <DxFormLayout Data=@category
                  ItemUpdating=@((fieldName, newValue) => OnItemUpdating(fieldName, newValue))>
        <DxFormLayoutItem Field=@nameof(Categories.CategoryName) Caption="Category name:" ColSpanMd="6" />
        <DxFormLayoutItem Field=@nameof(Categories.Description) Caption="Description:" ColSpanMd="6" />

        <DxFormLayoutItem ColSpanMd="6">
            <Template>
                <button id="saveButton" @onclick="@(() => { saveChanges(); })">Save</button>
                <button id="cancelButton" @onclick="@(() => { cancelChanges(); })">Cancel</button>
            </Template>
        </DxFormLayoutItem>
    </DxFormLayout>
}
@functions {

    [Parameter]
    string id { get; set; }

    Categories category = null;
    protected override async Task OnInitAsync()
    {
        category = await Http.GetJsonAsync<Categories>(wsp.Path + "categories/" + id);
    }

    void OnItemUpdating(string fieldName, object newValue)
    {
        if (fieldName == nameof(Categories.CategoryName))
        {
            category.CategoryName = newValue.ToString();
        }
        else if (fieldName == nameof(Categories.Description))
        {
            category.Description = newValue.ToString();
        }

        base.Invoke(StateHasChanged);
    }
    async void saveChanges()
    {
        await Http.SendJsonAsync(HttpMethod.Put, wsp.Path + "categories/" + category.CategoryId, category);
        UriHelper.NavigateTo(@"\DataGridWithSeparateEditForm");
    }
    void cancelChanges()
    {
        UriHelper.NavigateTo(@"\DataGridWithSeparateEditForm");
    }
}