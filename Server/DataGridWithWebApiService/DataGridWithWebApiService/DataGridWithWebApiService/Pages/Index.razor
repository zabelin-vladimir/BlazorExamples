@page "/"

@inject HttpClient Http
@inject WebServicePath wsp
@using DataGridWithWebApiService.Data

<h1>DxDataGrids with Web API Service</h1>
@if (categories == null)
{
    <h1>Loading...</h1>
}
else
{
    <DxDataGrid Data=@categories ShowFilterRow="false" ShowPager="false"
                RowRemoving=@((dataItem) => OnRowRemoving(dataItem))
                RowUpdating=@((updatingDataItem, newValues) => OnRowUpdating(updatingDataItem, newValues))
                RowInserting=@((newValues) => OnRowInserting(newValues))>
        <DxDataGridCommandColumn Width="150px"></DxDataGridCommandColumn>
        <DxDataGridColumn Field=@nameof(Categories.CategoryId)></DxDataGridColumn>
        <DxDataGridColumn Field=@nameof(Categories.CategoryName)></DxDataGridColumn>
        <DxDataGridColumn Field=@nameof(Categories.Description)></DxDataGridColumn>
    </DxDataGrid>
}
@functions {
    List<Categories> categories;

    protected override async Task OnInitAsync()
    {
        categories = await Http.GetJsonAsync<List<Categories>>(wsp.Path + "categories");
    }
    async void OnRowRemoving(Categories dataItem)
    {
        await Http.DeleteAsync(wsp.Path + "categories/" + dataItem.CategoryId);
        categories = await Http.GetJsonAsync<List<Categories>>(wsp.Path + "categories");
        await Invoke(StateHasChanged);
    }
    async void OnRowUpdating(Categories dataItem, Dictionary<string, object> newValues)
    {
        SetNewValues(dataItem, newValues);
        await Http.PutJsonAsync(wsp.Path + "categories/" + dataItem.CategoryId, dataItem);
        categories = await Http.GetJsonAsync<List<Categories>>(wsp.Path + "categories");
        await Invoke(StateHasChanged);
    }
    async void OnRowInserting(Dictionary<string, object> newValues)
    {
        Categories newCategory = new Categories();
        SetNewValues(newCategory, newValues);
        await Http.PostJsonAsync<Categories>(wsp.Path + "categories/", newCategory);
        categories = await Http.GetJsonAsync<List<Categories>>(wsp.Path + "categories");
        await Invoke(StateHasChanged);
    }
    private void SetNewValues(Categories dataItem, Dictionary<string, object> newValues)
    {
        foreach (var field in newValues.Keys)
        {
            switch (field)
            {
                case nameof(Categories.CategoryName):
                    dataItem.CategoryName = (string)newValues[field];
                    break;
                case nameof(Categories.Description):
                    dataItem.Description = (string)newValues[field];
                    break;
            }
        }
    }
}
